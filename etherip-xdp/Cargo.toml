[package]
name = "etherip-xdp"
version = "0.4.0"
edition = "2021"

authors = ["Menhera.org Developers"]
description = "EtherIP implementation using XDP for Linux, in Rust."
license = "Apache-2.0 OR MPL-2.0"
readme = "README.md"
repository = "https://github.com/menhera-org/etherip-xdp-rs"
homepage = "https://github.com/menhera-org/etherip-xdp-rs"
include = [
  "src/**",
  "Cargo.toml",
  "README*",
  "LICENSE*",
  "build.rs",
  "assets/**/*",
]

[features]
default = ["clap", "serde"]
build-lib = []
build-ebpf = []
clap = ["dep:clap"]
serde = ["dep:serde", "iphost/serde", "vlan/serde"]

[dependencies]
etherip-xdp-common = { version = "0.2.0", path = "../etherip-xdp-common", features = ["user"] }

anyhow = { workspace = true, default-features = true }
aya = { workspace = true }
aya-log = { workspace = true }
libc = { workspace = true }
tracing = { workspace = true }
tokio = { workspace = true, features = ["macros", "rt", "rt-multi-thread", "net", "signal"] }
ftth-rtnl = "0.3.3"
net-interfaces = "0.1"

vlan = { version = "0.1.1", default-features = false }
iphost = { version = "0.1", default-features = false }
serde = { version = "1", features = ["derive"], optional = true }
clap = { workspace = true, features = ["derive"], optional = true }
portable-string = "0.4.0"

[dev-dependencies]
tracing-log = "0.2"
tracing-subscriber = { version = "0.3.20", features = ["env-filter"] }
clap = { workspace = true, features = ["derive"] }

[build-dependencies]
anyhow = { workspace = true }
aya-build = { workspace = true }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.
#etherip-xdp-ebpf = { version = "0.2.0", path = "../etherip-xdp-ebpf" }

[[bin]]
name = "etherip-xdp"
path = "src/bin/etherip-xdp.rs"
